/*
border-box tells the browser to account for any border and 
padding in the values you specify for an element's width and height. 
If you set an element's width to 100 pixels, that 100 pixels will include any border or 
padding you added, and the content box will shrink to absorb that extra width
*/

html {
    box-sizing: border-box;
}

*,
::before,
::after {
    box-sizing: inherit;
}

#piano {
    background-color: #00471b;
    width: 992px;
    height: 290px;
    margin: 80px auto;
    padding: 90px 20px 0 20px;
    position: relative;
    border-radius: 10px;
}

.keys {
    background-color: #040404;
    width: 949px;
    height: 180px;
    padding-left: 2px;
    overflow: hidden;
}

.key {
    background-color: #FFF;
    position: relative;
    width: 41px;
    height: 175px;
    margin: 2px;
    float: left;
    border-radius: 0 0 3px 3px;
}

/*
This will target the elements with the class key black--key, 
and select the pseudo-element after these elements in the HTML
*/
.key.black--key::after {
    background-color: #1d1e32;
    content: "";
    position: absolute;
    left: -18px;
    width: 32px;
    height: 100px;
    border-radius: 0 0 3px 3px;
}

.logo {
    width: 200px;
    position: absolute;
    top: 23px;
}

/*
The @media at-rule, also known as a media query, 
is used to conditionally apply CSS. 
Media queries are commonly used to apply CSS based on the 
viewport width using the max-width and min-width properties.
*/
@media(max-width: 768px) {
    #piano {
        width: 358px;
    }

    .keys {
        width: 318px;
    }

    .logo {
        width: 150px;
    }
}

@media (min-width: 769px) and (max-width: 1199px) {
    #piano {
        width: 675px;
    }

    .keys {
        width: 633px;
    }
}